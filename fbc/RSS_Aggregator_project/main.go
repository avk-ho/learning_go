package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"rss_aggregator/internal/database"

	"github.com/go-chi/chi"
	"github.com/go-chi/cors"
	"github.com/joho/godotenv"

	_ "github.com/lib/pq"
)

type apiConfig struct {
	DB *database.Queries // found in the code generated by sqlc in internal/database
}

func main() {
	// get the environment variables
	godotenv.Load(".env")

	// check if we get the port from the env variables
	portString := os.Getenv("PORT")
	if portString == "" {
		log.Fatal("PORT is not found in the environment")
	}
	fmt.Println("Port:", portString)

	// get the db_url env variable
	db_url := os.Getenv("DB_URL")
	if portString == "" {
		log.Fatal("DB_URL is not found in the environment")
	}

	// create a connection to the database
	connection, err := sql.Open("postgres", db_url)
	if err != nil {
		log.Fatal("Can't connect to database.")
	}

	apiCfg := apiConfig{
		DB: database.New(connection),
	}

	// create a new router
	router := chi.NewRouter()

	// permissions
	router.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"*"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	}))

	// new route ?
	v1Router := chi.NewRouter()

	// HandleFunc is for multiple endpoints
	// v1Router.HandleFunc("/healthz", handlerReadiness)

	// Get() allows for only GET requests
	v1Router.Get("/healthz", handlerReadiness)
	v1Router.Get("/error", handlerError)
	v1Router.Post("/users", apiCfg.handlerCreateUser)

	router.Mount("/v1", v1Router)

	// create a server
	server := &http.Server{
		Handler: router,
		Addr:    ":" + portString,
	}

	log.Printf("Server starting on port %v", portString)

	// check if we ever get an error
	err = server.ListenAndServe()
	if err != nil {
		log.Fatal(err)
	}

}
